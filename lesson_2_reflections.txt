What happens when you initialize a repository? Why do you need to do it?

	Git creates a hidden .git folder storing the repository metadata. We need
	to initialize in order for a Git repository to be created, otherwise the
	directory is just a collection of files and not version controlled or
	tracked by Git. 

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	Staging area is an intermediate between the working directory and the 
	repository. It allows us to control what files from the working directory 
	we actually want to track in the repository. We can add files from the 
	working directory to the staging area and also remove files from the
	staging area if we later decide that certain files do not need to be
	version tracked. The files that are added to the staging area will
	eventually be committed into the repository and version tracked. 

How can you use the staging area to make sure you have one commit per logical
change?

	Use git diff --staged to compare the staged change against the most recent
	commit in the repository. Then go over the changes in the staged version to
	ensure that the change represent one logical unit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
